// Mocks generated by Mockito 5.3.2 from annotations
// in pluto_grid/test/mock/shared_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i5;

import 'package:flutter/gestures.dart' as _i7;
import 'package:flutter/material.dart' as _i3;
import 'package:flutter/rendering.dart' as _i9;
import 'package:flutter/services.dart' as _i10;
import 'package:flutter/src/foundation/assertions.dart' as _i11;
import 'package:flutter/src/foundation/diagnostics.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pluto_grid/pluto_grid.dart' as _i2;
import 'package:rxdart/rxdart.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFilteredList_0<E> extends _i1.SmartFake
    implements _i2.FilteredList<E> {
  _FakeFilteredList_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFocusNode_1 extends _i1.SmartFake implements _i3.FocusNode {
  _FakeFocusNode_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakePlutoGridScrollController_2 extends _i1.SmartFake
    implements _i2.PlutoGridScrollController {
  _FakePlutoGridScrollController_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlutoColumnMenuDelegate_3<T> extends _i1.SmartFake
    implements _i2.PlutoColumnMenuDelegate<T> {
  _FakePlutoColumnMenuDelegate_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlutoChangeNotifierFilterResolver_4 extends _i1.SmartFake
    implements _i2.PlutoChangeNotifierFilterResolver {
  _FakePlutoChangeNotifierFilterResolver_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGlobalKey_5<T extends _i3.State<_i3.StatefulWidget>>
    extends _i1.SmartFake implements _i3.GlobalKey<T> {
  _FakeGlobalKey_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePublishSubject_6<T> extends _i1.SmartFake
    implements _i4.PublishSubject<T> {
  _FakePublishSubject_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlutoGridColumnSizeConfig_7 extends _i1.SmartFake
    implements _i2.PlutoGridColumnSizeConfig {
  _FakePlutoGridColumnSizeConfig_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlutoGridConfiguration_8 extends _i1.SmartFake
    implements _i2.PlutoGridConfiguration {
  _FakePlutoGridConfiguration_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlutoGridLocaleText_9 extends _i1.SmartFake
    implements _i2.PlutoGridLocaleText {
  _FakePlutoGridLocaleText_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlutoGridStyleConfig_10 extends _i1.SmartFake
    implements _i2.PlutoGridStyleConfig {
  _FakePlutoGridStyleConfig_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlutoGridKeyPressed_11 extends _i1.SmartFake
    implements _i2.PlutoGridKeyPressed {
  _FakePlutoGridKeyPressed_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChangeNotifier_12 extends _i1.SmartFake
    implements _i3.ChangeNotifier {
  _FakeChangeNotifier_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOffset_13 extends _i1.SmartFake implements _i5.Offset {
  _FakeOffset_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlutoChangeNotifierFilter_14<T> extends _i1.SmartFake
    implements _i2.PlutoChangeNotifierFilter<T> {
  _FakePlutoChangeNotifierFilter_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlutoAutoSize_15<T> extends _i1.SmartFake
    implements _i2.PlutoAutoSize<T> {
  _FakePlutoAutoSize_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlutoResize_16<T> extends _i1.SmartFake
    implements _i2.PlutoResize<T> {
  _FakePlutoResize_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlutoGridCellPosition_17 extends _i1.SmartFake
    implements _i2.PlutoGridCellPosition {
  _FakePlutoGridCellPosition_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlutoRow_18 extends _i1.SmartFake implements _i2.PlutoRow {
  _FakePlutoRow_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlutoGridStateManager_19 extends _i1.SmartFake
    implements _i2.PlutoGridStateManager {
  _FakePlutoGridStateManager_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_20<T> extends _i1.SmartFake
    implements _i6.StreamSubscription<T> {
  _FakeStreamSubscription_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScrollController_21 extends _i1.SmartFake
    implements _i3.ScrollController {
  _FakeScrollController_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScrollPosition_22 extends _i1.SmartFake
    implements _i3.ScrollPosition {
  _FakeScrollPosition_22(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScrollPhysics_23 extends _i1.SmartFake implements _i3.ScrollPhysics {
  _FakeScrollPhysics_23(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScrollContext_24 extends _i1.SmartFake implements _i3.ScrollContext {
  _FakeScrollContext_24(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValueNotifier_25<T> extends _i1.SmartFake
    implements _i3.ValueNotifier<T> {
  _FakeValueNotifier_25(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScrollHoldController_26 extends _i1.SmartFake
    implements _i3.ScrollHoldController {
  _FakeScrollHoldController_26(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDrag_27 extends _i1.SmartFake implements _i7.Drag {
  _FakeDrag_27(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScrollMetrics_28 extends _i1.SmartFake implements _i3.ScrollMetrics {
  _FakeScrollMetrics_28(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSize_29 extends _i1.SmartFake implements _i5.Size {
  _FakeSize_29(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRect_30 extends _i1.SmartFake implements _i5.Rect {
  _FakeRect_30(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFocusAttachment_31 extends _i1.SmartFake
    implements _i3.FocusAttachment {
  _FakeFocusAttachment_31(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDiagnosticsNode_32 extends _i1.SmartFake
    implements _i3.DiagnosticsNode {
  _FakeDiagnosticsNode_32(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i8.TextTreeConfiguration? parentConfiguration,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [PlutoGridStateManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlutoGridStateManager extends _i1.Mock
    implements _i2.PlutoGridStateManager {
  @override
  _i2.FilteredList<_i2.PlutoColumn> get refColumns => (super.noSuchMethod(
        Invocation.getter(#refColumns),
        returnValue: _FakeFilteredList_0<_i2.PlutoColumn>(
          this,
          Invocation.getter(#refColumns),
        ),
        returnValueForMissingStub: _FakeFilteredList_0<_i2.PlutoColumn>(
          this,
          Invocation.getter(#refColumns),
        ),
      ) as _i2.FilteredList<_i2.PlutoColumn>);
  @override
  _i2.FilteredList<_i2.PlutoColumnGroup> get refColumnGroups =>
      (super.noSuchMethod(
        Invocation.getter(#refColumnGroups),
        returnValue: _FakeFilteredList_0<_i2.PlutoColumnGroup>(
          this,
          Invocation.getter(#refColumnGroups),
        ),
        returnValueForMissingStub: _FakeFilteredList_0<_i2.PlutoColumnGroup>(
          this,
          Invocation.getter(#refColumnGroups),
        ),
      ) as _i2.FilteredList<_i2.PlutoColumnGroup>);
  @override
  _i2.FilteredList<_i2.PlutoRow> get refRows => (super.noSuchMethod(
        Invocation.getter(#refRows),
        returnValue: _FakeFilteredList_0<_i2.PlutoRow>(
          this,
          Invocation.getter(#refRows),
        ),
        returnValueForMissingStub: _FakeFilteredList_0<_i2.PlutoRow>(
          this,
          Invocation.getter(#refRows),
        ),
      ) as _i2.FilteredList<_i2.PlutoRow>);
  @override
  _i3.FocusNode get gridFocusNode => (super.noSuchMethod(
        Invocation.getter(#gridFocusNode),
        returnValue: _FakeFocusNode_1(
          this,
          Invocation.getter(#gridFocusNode),
        ),
        returnValueForMissingStub: _FakeFocusNode_1(
          this,
          Invocation.getter(#gridFocusNode),
        ),
      ) as _i3.FocusNode);
  @override
  _i2.PlutoGridScrollController get scroll => (super.noSuchMethod(
        Invocation.getter(#scroll),
        returnValue: _FakePlutoGridScrollController_2(
          this,
          Invocation.getter(#scroll),
        ),
        returnValueForMissingStub: _FakePlutoGridScrollController_2(
          this,
          Invocation.getter(#scroll),
        ),
      ) as _i2.PlutoGridScrollController);
  @override
  _i2.PlutoColumnMenuDelegate<dynamic> get columnMenuDelegate =>
      (super.noSuchMethod(
        Invocation.getter(#columnMenuDelegate),
        returnValue: _FakePlutoColumnMenuDelegate_3<dynamic>(
          this,
          Invocation.getter(#columnMenuDelegate),
        ),
        returnValueForMissingStub: _FakePlutoColumnMenuDelegate_3<dynamic>(
          this,
          Invocation.getter(#columnMenuDelegate),
        ),
      ) as _i2.PlutoColumnMenuDelegate<dynamic>);
  @override
  _i2.PlutoChangeNotifierFilterResolver get notifierFilterResolver =>
      (super.noSuchMethod(
        Invocation.getter(#notifierFilterResolver),
        returnValue: _FakePlutoChangeNotifierFilterResolver_4(
          this,
          Invocation.getter(#notifierFilterResolver),
        ),
        returnValueForMissingStub: _FakePlutoChangeNotifierFilterResolver_4(
          this,
          Invocation.getter(#notifierFilterResolver),
        ),
      ) as _i2.PlutoChangeNotifierFilterResolver);
  @override
  _i3.GlobalKey<_i3.State<_i3.StatefulWidget>> get gridKey =>
      (super.noSuchMethod(
        Invocation.getter(#gridKey),
        returnValue: _FakeGlobalKey_5<_i3.State<_i3.StatefulWidget>>(
          this,
          Invocation.getter(#gridKey),
        ),
        returnValueForMissingStub:
            _FakeGlobalKey_5<_i3.State<_i3.StatefulWidget>>(
          this,
          Invocation.getter(#gridKey),
        ),
      ) as _i3.GlobalKey<_i3.State<_i3.StatefulWidget>>);
  @override
  _i4.PublishSubject<_i2.PlutoNotifierEvent> get streamNotifier =>
      (super.noSuchMethod(
        Invocation.getter(#streamNotifier),
        returnValue: _FakePublishSubject_6<_i2.PlutoNotifierEvent>(
          this,
          Invocation.getter(#streamNotifier),
        ),
        returnValueForMissingStub:
            _FakePublishSubject_6<_i2.PlutoNotifierEvent>(
          this,
          Invocation.getter(#streamNotifier),
        ),
      ) as _i4.PublishSubject<_i2.PlutoNotifierEvent>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i2.PlutoColumnGroup> get columnGroups => (super.noSuchMethod(
        Invocation.getter(#columnGroups),
        returnValue: <_i2.PlutoColumnGroup>[],
        returnValueForMissingStub: <_i2.PlutoColumnGroup>[],
      ) as List<_i2.PlutoColumnGroup>);
  @override
  bool get hasColumnGroups => (super.noSuchMethod(
        Invocation.getter(#hasColumnGroups),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get showColumnGroups => (super.noSuchMethod(
        Invocation.getter(#showColumnGroups),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i2.PlutoGridColumnSizeConfig get columnSizeConfig => (super.noSuchMethod(
        Invocation.getter(#columnSizeConfig),
        returnValue: _FakePlutoGridColumnSizeConfig_7(
          this,
          Invocation.getter(#columnSizeConfig),
        ),
        returnValueForMissingStub: _FakePlutoGridColumnSizeConfig_7(
          this,
          Invocation.getter(#columnSizeConfig),
        ),
      ) as _i2.PlutoGridColumnSizeConfig);
  @override
  _i2.PlutoAutoSizeMode get columnsAutoSizeMode => (super.noSuchMethod(
        Invocation.getter(#columnsAutoSizeMode),
        returnValue: _i2.PlutoAutoSizeMode.none,
        returnValueForMissingStub: _i2.PlutoAutoSizeMode.none,
      ) as _i2.PlutoAutoSizeMode);
  @override
  _i2.PlutoResizeMode get columnsResizeMode => (super.noSuchMethod(
        Invocation.getter(#columnsResizeMode),
        returnValue: _i2.PlutoResizeMode.none,
        returnValueForMissingStub: _i2.PlutoResizeMode.none,
      ) as _i2.PlutoResizeMode);
  @override
  bool get enableColumnsAutoSize => (super.noSuchMethod(
        Invocation.getter(#enableColumnsAutoSize),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get activatedColumnsAutoSize => (super.noSuchMethod(
        Invocation.getter(#activatedColumnsAutoSize),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i2.PlutoColumn> get columns => (super.noSuchMethod(
        Invocation.getter(#columns),
        returnValue: <_i2.PlutoColumn>[],
        returnValueForMissingStub: <_i2.PlutoColumn>[],
      ) as List<_i2.PlutoColumn>);
  @override
  List<int> get columnIndexes => (super.noSuchMethod(
        Invocation.getter(#columnIndexes),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);
  @override
  List<int> get columnIndexesForShowFrozen => (super.noSuchMethod(
        Invocation.getter(#columnIndexesForShowFrozen),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);
  @override
  double get columnsWidth => (super.noSuchMethod(
        Invocation.getter(#columnsWidth),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  List<_i2.PlutoColumn> get leftFrozenColumns => (super.noSuchMethod(
        Invocation.getter(#leftFrozenColumns),
        returnValue: <_i2.PlutoColumn>[],
        returnValueForMissingStub: <_i2.PlutoColumn>[],
      ) as List<_i2.PlutoColumn>);
  @override
  List<int> get leftFrozenColumnIndexes => (super.noSuchMethod(
        Invocation.getter(#leftFrozenColumnIndexes),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);
  @override
  double get leftFrozenColumnsWidth => (super.noSuchMethod(
        Invocation.getter(#leftFrozenColumnsWidth),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  List<_i2.PlutoColumn> get rightFrozenColumns => (super.noSuchMethod(
        Invocation.getter(#rightFrozenColumns),
        returnValue: <_i2.PlutoColumn>[],
        returnValueForMissingStub: <_i2.PlutoColumn>[],
      ) as List<_i2.PlutoColumn>);
  @override
  List<int> get rightFrozenColumnIndexes => (super.noSuchMethod(
        Invocation.getter(#rightFrozenColumnIndexes),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);
  @override
  double get rightFrozenColumnsWidth => (super.noSuchMethod(
        Invocation.getter(#rightFrozenColumnsWidth),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  List<_i2.PlutoColumn> get bodyColumns => (super.noSuchMethod(
        Invocation.getter(#bodyColumns),
        returnValue: <_i2.PlutoColumn>[],
        returnValueForMissingStub: <_i2.PlutoColumn>[],
      ) as List<_i2.PlutoColumn>);
  @override
  List<int> get bodyColumnIndexes => (super.noSuchMethod(
        Invocation.getter(#bodyColumnIndexes),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);
  @override
  double get bodyColumnsWidth => (super.noSuchMethod(
        Invocation.getter(#bodyColumnsWidth),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  bool get hasSortedColumn => (super.noSuchMethod(
        Invocation.getter(#hasSortedColumn),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<int> get columnIndexesByShowFrozen => (super.noSuchMethod(
        Invocation.getter(#columnIndexesByShowFrozen),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);
  @override
  bool get isDraggingRow => (super.noSuchMethod(
        Invocation.getter(#isDraggingRow),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i2.PlutoRow> get dragRows => (super.noSuchMethod(
        Invocation.getter(#dragRows),
        returnValue: <_i2.PlutoRow>[],
        returnValueForMissingStub: <_i2.PlutoRow>[],
      ) as List<_i2.PlutoRow>);
  @override
  bool get canRowDrag => (super.noSuchMethod(
        Invocation.getter(#canRowDrag),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isEditing => (super.noSuchMethod(
        Invocation.getter(#isEditing),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get autoEditing => (super.noSuchMethod(
        Invocation.getter(#autoEditing),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i2.PlutoRow> get filterRows => (super.noSuchMethod(
        Invocation.getter(#filterRows),
        returnValue: <_i2.PlutoRow>[],
        returnValueForMissingStub: <_i2.PlutoRow>[],
      ) as List<_i2.PlutoRow>);
  @override
  bool get hasFilter => (super.noSuchMethod(
        Invocation.getter(#hasFilter),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get keepFocus => (super.noSuchMethod(
        Invocation.getter(#keepFocus),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasFocus => (super.noSuchMethod(
        Invocation.getter(#hasFocus),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i2.PlutoGridConfiguration get configuration => (super.noSuchMethod(
        Invocation.getter(#configuration),
        returnValue: _FakePlutoGridConfiguration_8(
          this,
          Invocation.getter(#configuration),
        ),
        returnValueForMissingStub: _FakePlutoGridConfiguration_8(
          this,
          Invocation.getter(#configuration),
        ),
      ) as _i2.PlutoGridConfiguration);
  @override
  _i2.PlutoGridMode get mode => (super.noSuchMethod(
        Invocation.getter(#mode),
        returnValue: _i2.PlutoGridMode.normal,
        returnValueForMissingStub: _i2.PlutoGridMode.normal,
      ) as _i2.PlutoGridMode);
  @override
  _i2.PlutoGridLocaleText get localeText => (super.noSuchMethod(
        Invocation.getter(#localeText),
        returnValue: _FakePlutoGridLocaleText_9(
          this,
          Invocation.getter(#localeText),
        ),
        returnValueForMissingStub: _FakePlutoGridLocaleText_9(
          this,
          Invocation.getter(#localeText),
        ),
      ) as _i2.PlutoGridLocaleText);
  @override
  _i2.PlutoGridStyleConfig get style => (super.noSuchMethod(
        Invocation.getter(#style),
        returnValue: _FakePlutoGridStyleConfig_10(
          this,
          Invocation.getter(#style),
        ),
        returnValueForMissingStub: _FakePlutoGridStyleConfig_10(
          this,
          Invocation.getter(#style),
        ),
      ) as _i2.PlutoGridStyleConfig);
  @override
  bool get sortOnlyEvent => (super.noSuchMethod(
        Invocation.getter(#sortOnlyEvent),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get filterOnlyEvent => (super.noSuchMethod(
        Invocation.getter(#filterOnlyEvent),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i2.PlutoGridKeyPressed get keyPressed => (super.noSuchMethod(
        Invocation.getter(#keyPressed),
        returnValue: _FakePlutoGridKeyPressed_11(
          this,
          Invocation.getter(#keyPressed),
        ),
        returnValueForMissingStub: _FakePlutoGridKeyPressed_11(
          this,
          Invocation.getter(#keyPressed),
        ),
      ) as _i2.PlutoGridKeyPressed);
  @override
  _i3.ChangeNotifier get resizingChangeNotifier => (super.noSuchMethod(
        Invocation.getter(#resizingChangeNotifier),
        returnValue: _FakeChangeNotifier_12(
          this,
          Invocation.getter(#resizingChangeNotifier),
        ),
        returnValueForMissingStub: _FakeChangeNotifier_12(
          this,
          Invocation.getter(#resizingChangeNotifier),
        ),
      ) as _i3.ChangeNotifier);
  @override
  double get headerHeight => (super.noSuchMethod(
        Invocation.getter(#headerHeight),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get footerHeight => (super.noSuchMethod(
        Invocation.getter(#footerHeight),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get columnRowContainerHeight => (super.noSuchMethod(
        Invocation.getter(#columnRowContainerHeight),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get rowContainerHeight => (super.noSuchMethod(
        Invocation.getter(#rowContainerHeight),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  bool get showFrozenColumn => (super.noSuchMethod(
        Invocation.getter(#showFrozenColumn),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get showColumnTitle => (super.noSuchMethod(
        Invocation.getter(#showColumnTitle),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get showColumnFooter => (super.noSuchMethod(
        Invocation.getter(#showColumnFooter),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get showColumnFilter => (super.noSuchMethod(
        Invocation.getter(#showColumnFilter),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get showHeader => (super.noSuchMethod(
        Invocation.getter(#showHeader),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get showFooter => (super.noSuchMethod(
        Invocation.getter(#showFooter),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get showLoading => (super.noSuchMethod(
        Invocation.getter(#showLoading),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i2.PlutoGridLoadingLevel get loadingLevel => (super.noSuchMethod(
        Invocation.getter(#loadingLevel),
        returnValue: _i2.PlutoGridLoadingLevel.grid,
        returnValueForMissingStub: _i2.PlutoGridLoadingLevel.grid,
      ) as _i2.PlutoGridLoadingLevel);
  @override
  bool get hasLeftFrozenColumns => (super.noSuchMethod(
        Invocation.getter(#hasLeftFrozenColumns),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasRightFrozenColumns => (super.noSuchMethod(
        Invocation.getter(#hasRightFrozenColumns),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  double get headerBottomOffset => (super.noSuchMethod(
        Invocation.getter(#headerBottomOffset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get footerTopOffset => (super.noSuchMethod(
        Invocation.getter(#footerTopOffset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get columnHeight => (super.noSuchMethod(
        Invocation.getter(#columnHeight),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get columnFooterHeight => (super.noSuchMethod(
        Invocation.getter(#columnFooterHeight),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get columnGroupHeight => (super.noSuchMethod(
        Invocation.getter(#columnGroupHeight),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get columnFilterHeight => (super.noSuchMethod(
        Invocation.getter(#columnFilterHeight),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get columnBottomOffset => (super.noSuchMethod(
        Invocation.getter(#columnBottomOffset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get rowsTopOffset => (super.noSuchMethod(
        Invocation.getter(#rowsTopOffset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get rowHeight => (super.noSuchMethod(
        Invocation.getter(#rowHeight),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get rowTotalHeight => (super.noSuchMethod(
        Invocation.getter(#rowTotalHeight),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get bodyTopOffset => (super.noSuchMethod(
        Invocation.getter(#bodyTopOffset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get bodyLeftOffset => (super.noSuchMethod(
        Invocation.getter(#bodyLeftOffset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get bodyRightOffset => (super.noSuchMethod(
        Invocation.getter(#bodyRightOffset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get bodyLeftScrollOffset => (super.noSuchMethod(
        Invocation.getter(#bodyLeftScrollOffset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get bodyRightScrollOffset => (super.noSuchMethod(
        Invocation.getter(#bodyRightScrollOffset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get bodyUpScrollOffset => (super.noSuchMethod(
        Invocation.getter(#bodyUpScrollOffset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get bodyDownScrollOffset => (super.noSuchMethod(
        Invocation.getter(#bodyDownScrollOffset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get leftFrozenRightOffset => (super.noSuchMethod(
        Invocation.getter(#leftFrozenRightOffset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get rightFrozenLeftOffset => (super.noSuchMethod(
        Invocation.getter(#rightFrozenLeftOffset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get rightBlankOffset => (super.noSuchMethod(
        Invocation.getter(#rightBlankOffset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get scrollOffsetByFrozenColumn => (super.noSuchMethod(
        Invocation.getter(#scrollOffsetByFrozenColumn),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  _i5.TextDirection get textDirection => (super.noSuchMethod(
        Invocation.getter(#textDirection),
        returnValue: _i5.TextDirection.rtl,
        returnValueForMissingStub: _i5.TextDirection.rtl,
      ) as _i5.TextDirection);
  @override
  bool get isLTR => (super.noSuchMethod(
        Invocation.getter(#isLTR),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isRTL => (super.noSuchMethod(
        Invocation.getter(#isRTL),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  int get page => (super.noSuchMethod(
        Invocation.getter(#page),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get pageSize => (super.noSuchMethod(
        Invocation.getter(#pageSize),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get pageRangeFrom => (super.noSuchMethod(
        Invocation.getter(#pageRangeFrom),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get pageRangeTo => (super.noSuchMethod(
        Invocation.getter(#pageRangeTo),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  int get totalPage => (super.noSuchMethod(
        Invocation.getter(#totalPage),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  bool get isPaginated => (super.noSuchMethod(
        Invocation.getter(#isPaginated),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasRowGroups => (super.noSuchMethod(
        Invocation.getter(#hasRowGroups),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get enabledRowGroups => (super.noSuchMethod(
        Invocation.getter(#enabledRowGroups),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  Iterable<_i2.PlutoRow> get iterateAllMainRowGroup => (super.noSuchMethod(
        Invocation.getter(#iterateAllMainRowGroup),
        returnValue: <_i2.PlutoRow>[],
        returnValueForMissingStub: <_i2.PlutoRow>[],
      ) as Iterable<_i2.PlutoRow>);
  @override
  Iterable<_i2.PlutoRow> get iterateAllRowGroup => (super.noSuchMethod(
        Invocation.getter(#iterateAllRowGroup),
        returnValue: <_i2.PlutoRow>[],
        returnValueForMissingStub: <_i2.PlutoRow>[],
      ) as Iterable<_i2.PlutoRow>);
  @override
  Iterable<_i2.PlutoRow> get iterateAllRowAndGroup => (super.noSuchMethod(
        Invocation.getter(#iterateAllRowAndGroup),
        returnValue: <_i2.PlutoRow>[],
        returnValueForMissingStub: <_i2.PlutoRow>[],
      ) as Iterable<_i2.PlutoRow>);
  @override
  Iterable<_i2.PlutoRow> get iterateAllRow => (super.noSuchMethod(
        Invocation.getter(#iterateAllRow),
        returnValue: <_i2.PlutoRow>[],
        returnValueForMissingStub: <_i2.PlutoRow>[],
      ) as Iterable<_i2.PlutoRow>);
  @override
  Iterable<_i2.PlutoRow> get iterateFilteredMainRowGroup => (super.noSuchMethod(
        Invocation.getter(#iterateFilteredMainRowGroup),
        returnValue: <_i2.PlutoRow>[],
        returnValueForMissingStub: <_i2.PlutoRow>[],
      ) as Iterable<_i2.PlutoRow>);
  @override
  Iterable<_i2.PlutoRow> get iterateMainRowGroup => (super.noSuchMethod(
        Invocation.getter(#iterateMainRowGroup),
        returnValue: <_i2.PlutoRow>[],
        returnValueForMissingStub: <_i2.PlutoRow>[],
      ) as Iterable<_i2.PlutoRow>);
  @override
  Iterable<_i2.PlutoRow> get iterateRowGroup => (super.noSuchMethod(
        Invocation.getter(#iterateRowGroup),
        returnValue: <_i2.PlutoRow>[],
        returnValueForMissingStub: <_i2.PlutoRow>[],
      ) as Iterable<_i2.PlutoRow>);
  @override
  Iterable<_i2.PlutoRow> get iterateRowAndGroup => (super.noSuchMethod(
        Invocation.getter(#iterateRowAndGroup),
        returnValue: <_i2.PlutoRow>[],
        returnValueForMissingStub: <_i2.PlutoRow>[],
      ) as Iterable<_i2.PlutoRow>);
  @override
  Iterable<_i2.PlutoRow> get iterateRow => (super.noSuchMethod(
        Invocation.getter(#iterateRow),
        returnValue: <_i2.PlutoRow>[],
        returnValueForMissingStub: <_i2.PlutoRow>[],
      ) as Iterable<_i2.PlutoRow>);
  @override
  List<_i2.PlutoRow> get rows => (super.noSuchMethod(
        Invocation.getter(#rows),
        returnValue: <_i2.PlutoRow>[],
        returnValueForMissingStub: <_i2.PlutoRow>[],
      ) as List<_i2.PlutoRow>);
  @override
  List<_i2.PlutoRow> get checkedRows => (super.noSuchMethod(
        Invocation.getter(#checkedRows),
        returnValue: <_i2.PlutoRow>[],
        returnValueForMissingStub: <_i2.PlutoRow>[],
      ) as List<_i2.PlutoRow>);
  @override
  List<_i2.PlutoRow> get unCheckedRows => (super.noSuchMethod(
        Invocation.getter(#unCheckedRows),
        returnValue: <_i2.PlutoRow>[],
        returnValueForMissingStub: <_i2.PlutoRow>[],
      ) as List<_i2.PlutoRow>);
  @override
  bool get hasCheckedRow => (super.noSuchMethod(
        Invocation.getter(#hasCheckedRow),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasUnCheckedRow => (super.noSuchMethod(
        Invocation.getter(#hasUnCheckedRow),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isHorizontalOverScrolled => (super.noSuchMethod(
        Invocation.getter(#isHorizontalOverScrolled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  double get correctHorizontalOffset => (super.noSuchMethod(
        Invocation.getter(#correctHorizontalOffset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  _i5.Offset get directionalScrollEdgeOffset => (super.noSuchMethod(
        Invocation.getter(#directionalScrollEdgeOffset),
        returnValue: _FakeOffset_13(
          this,
          Invocation.getter(#directionalScrollEdgeOffset),
        ),
        returnValueForMissingStub: _FakeOffset_13(
          this,
          Invocation.getter(#directionalScrollEdgeOffset),
        ),
      ) as _i5.Offset);
  @override
  bool get isSelecting => (super.noSuchMethod(
        Invocation.getter(#isSelecting),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i2.PlutoGridSelectingMode get selectingMode => (super.noSuchMethod(
        Invocation.getter(#selectingMode),
        returnValue: _i2.PlutoGridSelectingMode.cell,
        returnValueForMissingStub: _i2.PlutoGridSelectingMode.cell,
      ) as _i2.PlutoGridSelectingMode);
  @override
  List<_i2.PlutoGridSelectingCellPosition> get currentSelectingPositionList =>
      (super.noSuchMethod(
        Invocation.getter(#currentSelectingPositionList),
        returnValue: <_i2.PlutoGridSelectingCellPosition>[],
        returnValueForMissingStub: <_i2.PlutoGridSelectingCellPosition>[],
      ) as List<_i2.PlutoGridSelectingCellPosition>);
  @override
  bool get hasCurrentSelectingPosition => (super.noSuchMethod(
        Invocation.getter(#hasCurrentSelectingPosition),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  List<_i2.PlutoRow> get currentSelectingRows => (super.noSuchMethod(
        Invocation.getter(#currentSelectingRows),
        returnValue: <_i2.PlutoRow>[],
        returnValueForMissingStub: <_i2.PlutoRow>[],
      ) as List<_i2.PlutoRow>);
  @override
  String get currentSelectingText => (super.noSuchMethod(
        Invocation.getter(#currentSelectingText),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set headerHeight(double? value) => super.noSuchMethod(
        Invocation.setter(
          #headerHeight,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set footerHeight(double? value) => super.noSuchMethod(
        Invocation.setter(
          #footerHeight,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set columnFooterHeight(double? value) => super.noSuchMethod(
        Invocation.setter(
          #columnFooterHeight,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.PlutoChangeNotifierFilter<T> resolveNotifierFilter<T>() =>
      (super.noSuchMethod(
        Invocation.method(
          #resolveNotifierFilter,
          [],
        ),
        returnValue: _FakePlutoChangeNotifierFilter_14<T>(
          this,
          Invocation.method(
            #resolveNotifierFilter,
            [],
          ),
        ),
        returnValueForMissingStub: _FakePlutoChangeNotifierFilter_14<T>(
          this,
          Invocation.method(
            #resolveNotifierFilter,
            [],
          ),
        ),
      ) as _i2.PlutoChangeNotifierFilter<T>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners([
    bool? notify = true,
    int? notifier,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [
            notify,
            notifier,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListenersOnPostFrame([
    bool? notify = true,
    int? notifier,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #notifyListenersOnPostFrame,
          [
            notify,
            notifier,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addNotifier(int? hash) => super.noSuchMethod(
        Invocation.method(
          #addNotifier,
          [hash],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setCurrentCellPosition(
    _i2.PlutoGridCellPosition? cellPosition, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setCurrentCellPosition,
          [cellPosition],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void updateCurrentCellPosition({bool? notify = true}) => super.noSuchMethod(
        Invocation.method(
          #updateCurrentCellPosition,
          [],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  int? columnIdxByCellKeyAndRowIdx(
    _i3.Key? cellKey,
    int? rowIdx,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #columnIdxByCellKeyAndRowIdx,
          [
            cellKey,
            rowIdx,
          ],
        ),
        returnValueForMissingStub: null,
      ) as int?);
  @override
  void clearCurrentCell({bool? notify = true}) => super.noSuchMethod(
        Invocation.method(
          #clearCurrentCell,
          [],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setCurrentCell(
    _i2.PlutoCell? cell,
    int? rowIdx, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setCurrentCell,
          [
            cell,
            rowIdx,
          ],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool canMoveCell(
    _i2.PlutoGridCellPosition? cellPosition,
    _i2.PlutoMoveDirection? direction,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #canMoveCell,
          [
            cellPosition,
            direction,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool canNotMoveCell(
    _i2.PlutoGridCellPosition? cellPosition,
    _i2.PlutoMoveDirection? direction,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #canNotMoveCell,
          [
            cellPosition,
            direction,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool canChangeCellValue({
    required _i2.PlutoCell? cell,
    dynamic newValue,
    dynamic oldValue,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #canChangeCellValue,
          [],
          {
            #cell: cell,
            #newValue: newValue,
            #oldValue: oldValue,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool canNotChangeCellValue({
    required _i2.PlutoCell? cell,
    dynamic newValue,
    dynamic oldValue,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #canNotChangeCellValue,
          [],
          {
            #cell: cell,
            #newValue: newValue,
            #oldValue: oldValue,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  dynamic filteredCellValue({
    required _i2.PlutoColumn? column,
    dynamic newValue,
    dynamic oldValue,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #filteredCellValue,
          [],
          {
            #column: column,
            #newValue: newValue,
            #oldValue: oldValue,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isCurrentCell(_i2.PlutoCell? cell) => (super.noSuchMethod(
        Invocation.method(
          #isCurrentCell,
          [cell],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isInvalidCellPosition(_i2.PlutoGridCellPosition? cellPosition) =>
      (super.noSuchMethod(
        Invocation.method(
          #isInvalidCellPosition,
          [cellPosition],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void setShowColumnGroups(
    bool? flag, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setShowColumnGroups,
          [flag],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i2.PlutoColumnGroupPair> separateLinkedGroup({
    required List<_i2.PlutoColumnGroup>? columnGroupList,
    required List<_i2.PlutoColumn>? columns,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #separateLinkedGroup,
          [],
          {
            #columnGroupList: columnGroupList,
            #columns: columns,
          },
        ),
        returnValue: <_i2.PlutoColumnGroupPair>[],
        returnValueForMissingStub: <_i2.PlutoColumnGroupPair>[],
      ) as List<_i2.PlutoColumnGroupPair>);
  @override
  int columnGroupDepth(List<_i2.PlutoColumnGroup>? columnGroupList) =>
      (super.noSuchMethod(
        Invocation.method(
          #columnGroupDepth,
          [columnGroupList],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  void removeColumnsInColumnGroup(
    List<_i2.PlutoColumn>? columns, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #removeColumnsInColumnGroup,
          [columns],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setGroupToColumn() => super.noSuchMethod(
        Invocation.method(
          #setGroupToColumn,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void activateColumnsAutoSize() => super.noSuchMethod(
        Invocation.method(
          #activateColumnsAutoSize,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void deactivateColumnsAutoSize() => super.noSuchMethod(
        Invocation.method(
          #deactivateColumnsAutoSize,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.PlutoAutoSize<dynamic> getColumnsAutoSizeHelper({
    required Iterable<_i2.PlutoColumn>? columns,
    required double? maxWidth,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getColumnsAutoSizeHelper,
          [],
          {
            #columns: columns,
            #maxWidth: maxWidth,
          },
        ),
        returnValue: _FakePlutoAutoSize_15<dynamic>(
          this,
          Invocation.method(
            #getColumnsAutoSizeHelper,
            [],
            {
              #columns: columns,
              #maxWidth: maxWidth,
            },
          ),
        ),
        returnValueForMissingStub: _FakePlutoAutoSize_15<dynamic>(
          this,
          Invocation.method(
            #getColumnsAutoSizeHelper,
            [],
            {
              #columns: columns,
              #maxWidth: maxWidth,
            },
          ),
        ),
      ) as _i2.PlutoAutoSize<dynamic>);
  @override
  _i2.PlutoResize<dynamic> getColumnsResizeHelper({
    required List<_i2.PlutoColumn>? columns,
    required _i2.PlutoColumn? column,
    required double? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getColumnsResizeHelper,
          [],
          {
            #columns: columns,
            #column: column,
            #offset: offset,
          },
        ),
        returnValue: _FakePlutoResize_16<dynamic>(
          this,
          Invocation.method(
            #getColumnsResizeHelper,
            [],
            {
              #columns: columns,
              #column: column,
              #offset: offset,
            },
          ),
        ),
        returnValueForMissingStub: _FakePlutoResize_16<dynamic>(
          this,
          Invocation.method(
            #getColumnsResizeHelper,
            [],
            {
              #columns: columns,
              #column: column,
              #offset: offset,
            },
          ),
        ),
      ) as _i2.PlutoResize<dynamic>);
  @override
  void setColumnSizeConfig(_i2.PlutoGridColumnSizeConfig? config) =>
      super.noSuchMethod(
        Invocation.method(
          #setColumnSizeConfig,
          [config],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void toggleFrozenColumn(
    _i2.PlutoColumn? column,
    _i2.PlutoColumnFrozen? frozen,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #toggleFrozenColumn,
          [
            column,
            frozen,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void toggleSortColumn(_i2.PlutoColumn? column) => super.noSuchMethod(
        Invocation.method(
          #toggleSortColumn,
          [column],
        ),
        returnValueForMissingStub: null,
      );
  @override
  int? columnIndex(_i2.PlutoColumn? column) => (super.noSuchMethod(
        Invocation.method(
          #columnIndex,
          [column],
        ),
        returnValueForMissingStub: null,
      ) as int?);
  @override
  void insertColumns(
    int? columnIdx,
    List<_i2.PlutoColumn>? columns,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #insertColumns,
          [
            columnIdx,
            columns,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeColumns(List<_i2.PlutoColumn>? columns) => super.noSuchMethod(
        Invocation.method(
          #removeColumns,
          [columns],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void moveColumn({
    required _i2.PlutoColumn? column,
    required _i2.PlutoColumn? targetColumn,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #moveColumn,
          [],
          {
            #column: column,
            #targetColumn: targetColumn,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resizeColumn(
    _i2.PlutoColumn? column,
    double? offset,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #resizeColumn,
          [
            column,
            offset,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void autoFitColumn(
    _i3.BuildContext? context,
    _i2.PlutoColumn? column,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #autoFitColumn,
          [
            context,
            column,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void hideColumn(
    _i2.PlutoColumn? column,
    bool? hide, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #hideColumn,
          [
            column,
            hide,
          ],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void hideColumns(
    List<_i2.PlutoColumn>? columns,
    bool? hide, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #hideColumns,
          [
            columns,
            hide,
          ],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void sortAscending(
    _i2.PlutoColumn? column, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #sortAscending,
          [column],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void sortDescending(
    _i2.PlutoColumn? column, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #sortDescending,
          [column],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void sortBySortIdx(
    _i2.PlutoColumn? column, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #sortBySortIdx,
          [column],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void showSetColumnsPopup(_i3.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #showSetColumnsPopup,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool limitResizeColumn(
    _i2.PlutoColumn? column,
    double? offset,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #limitResizeColumn,
          [
            column,
            offset,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool limitMoveColumn({
    required _i2.PlutoColumn? column,
    required _i2.PlutoColumn? targetColumn,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #limitMoveColumn,
          [],
          {
            #column: column,
            #targetColumn: targetColumn,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool limitToggleFrozenColumn(
    _i2.PlutoColumn? column,
    _i2.PlutoColumnFrozen? frozen,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #limitToggleFrozenColumn,
          [
            column,
            frozen,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool limitHideColumn(
    _i2.PlutoColumn? column,
    bool? hide, {
    double? accumulateWidth = 0.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #limitHideColumn,
          [
            column,
            hide,
          ],
          {#accumulateWidth: accumulateWidth},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void setIsDraggingRow(
    bool? flag, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setIsDraggingRow,
          [flag],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setDragRows(
    List<_i2.PlutoRow>? rows, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setDragRows,
          [rows],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setDragTargetRowIdx(
    int? rowIdx, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setDragTargetRowIdx,
          [rowIdx],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isRowIdxDragTarget(int? rowIdx) => (super.noSuchMethod(
        Invocation.method(
          #isRowIdxDragTarget,
          [rowIdx],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isRowIdxTopDragTarget(int? rowIdx) => (super.noSuchMethod(
        Invocation.method(
          #isRowIdxTopDragTarget,
          [rowIdx],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isRowIdxBottomDragTarget(int? rowIdx) => (super.noSuchMethod(
        Invocation.method(
          #isRowIdxBottomDragTarget,
          [rowIdx],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isRowBeingDragged(_i3.Key? rowKey) => (super.noSuchMethod(
        Invocation.method(
          #isRowBeingDragged,
          [rowKey],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isEditableCell(_i2.PlutoCell? cell) => (super.noSuchMethod(
        Invocation.method(
          #isEditableCell,
          [cell],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void setEditing(
    bool? flag, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setEditing,
          [flag],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setAutoEditing(
    bool? flag, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setAutoEditing,
          [flag],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setTextEditingController(
          _i3.TextEditingController? textEditingController) =>
      super.noSuchMethod(
        Invocation.method(
          #setTextEditingController,
          [textEditingController],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void toggleEditing({bool? notify = true}) => super.noSuchMethod(
        Invocation.method(
          #toggleEditing,
          [],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void pasteCellValue(List<List<String>>? textList) => super.noSuchMethod(
        Invocation.method(
          #pasteCellValue,
          [textList],
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic castValueByColumnType(
    dynamic value,
    _i2.PlutoColumn? column,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #castValueByColumnType,
          [
            value,
            column,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void changeCellValue(
    _i2.PlutoCell? cell,
    dynamic value, {
    bool? callOnChangedEvent = true,
    bool? force = false,
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #changeCellValue,
          [
            cell,
            value,
          ],
          {
            #callOnChangedEvent: callOnChangedEvent,
            #force: force,
            #notify: notify,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setFilter(
    _i2.FilteredListFilter<_i2.PlutoRow>? filter, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setFilter,
          [filter],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setFilterWithFilterRows(
    List<_i2.PlutoRow>? rows, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setFilterWithFilterRows,
          [rows],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setFilterRows(List<_i2.PlutoRow>? rows) => super.noSuchMethod(
        Invocation.method(
          #setFilterRows,
          [rows],
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i2.PlutoRow> filterRowsByField(String? columnField) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterRowsByField,
          [columnField],
        ),
        returnValue: <_i2.PlutoRow>[],
        returnValueForMissingStub: <_i2.PlutoRow>[],
      ) as List<_i2.PlutoRow>);
  @override
  bool isFilteredColumn(_i2.PlutoColumn? column) => (super.noSuchMethod(
        Invocation.method(
          #isFilteredColumn,
          [column],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void removeColumnsInFilterRows(
    List<_i2.PlutoColumn>? columns, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #removeColumnsInFilterRows,
          [columns],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void showFilterPopup(
    _i3.BuildContext? context, {
    _i2.PlutoColumn? calledColumn,
    void Function()? onClosed,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #showFilterPopup,
          [context],
          {
            #calledColumn: calledColumn,
            #onClosed: onClosed,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setKeepFocus(
    bool? flag, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setKeepFocus,
          [flag],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void nextFocusOfColumnFilter(
    _i2.PlutoColumn? column, {
    bool? reversed = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #nextFocusOfColumnFilter,
          [column],
          {#reversed: reversed},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setKeyManager(_i2.PlutoGridKeyManager? keyManager) => super.noSuchMethod(
        Invocation.method(
          #setKeyManager,
          [keyManager],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setEventManager(_i2.PlutoGridEventManager? eventManager) =>
      super.noSuchMethod(
        Invocation.method(
          #setEventManager,
          [eventManager],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setConfiguration(
    _i2.PlutoGridConfiguration? configuration, {
    bool? updateLocale = true,
    bool? applyColumnFilter = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setConfiguration,
          [configuration],
          {
            #updateLocale: updateLocale,
            #applyColumnFilter: applyColumnFilter,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setGridMode(_i2.PlutoGridMode? mode) => super.noSuchMethod(
        Invocation.method(
          #setGridMode,
          [mode],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resetCurrentState({bool? notify = true}) => super.noSuchMethod(
        Invocation.method(
          #resetCurrentState,
          [],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void handleOnSelected() => super.noSuchMethod(
        Invocation.method(
          #handleOnSelected,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setSortOnlyEvent(bool? flag) => super.noSuchMethod(
        Invocation.method(
          #setSortOnlyEvent,
          [flag],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setFilterOnlyEvent(bool? flag) => super.noSuchMethod(
        Invocation.method(
          #setFilterOnlyEvent,
          [flag],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.PlutoGridCellPosition cellPositionToMove(
    _i2.PlutoGridCellPosition? cellPosition,
    _i2.PlutoMoveDirection? direction,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cellPositionToMove,
          [
            cellPosition,
            direction,
          ],
        ),
        returnValue: _FakePlutoGridCellPosition_17(
          this,
          Invocation.method(
            #cellPositionToMove,
            [
              cellPosition,
              direction,
            ],
          ),
        ),
        returnValueForMissingStub: _FakePlutoGridCellPosition_17(
          this,
          Invocation.method(
            #cellPositionToMove,
            [
              cellPosition,
              direction,
            ],
          ),
        ),
      ) as _i2.PlutoGridCellPosition);
  @override
  void moveCurrentCell(
    _i2.PlutoMoveDirection? direction, {
    bool? force = false,
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #moveCurrentCell,
          [direction],
          {
            #force: force,
            #notify: notify,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void moveCurrentCellToEdgeOfColumns(
    _i2.PlutoMoveDirection? direction, {
    bool? force = false,
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #moveCurrentCellToEdgeOfColumns,
          [direction],
          {
            #force: force,
            #notify: notify,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void moveCurrentCellToEdgeOfRows(
    _i2.PlutoMoveDirection? direction, {
    bool? force = false,
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #moveCurrentCellToEdgeOfRows,
          [direction],
          {
            #force: force,
            #notify: notify,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void moveCurrentCellByRowIdx(
    int? rowIdx,
    _i2.PlutoMoveDirection? direction, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #moveCurrentCellByRowIdx,
          [
            rowIdx,
            direction,
          ],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void moveSelectingCell(_i2.PlutoMoveDirection? direction) =>
      super.noSuchMethod(
        Invocation.method(
          #moveSelectingCell,
          [direction],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void moveSelectingCellToEdgeOfColumns(
    _i2.PlutoMoveDirection? direction, {
    bool? force = false,
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #moveSelectingCellToEdgeOfColumns,
          [direction],
          {
            #force: force,
            #notify: notify,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void moveSelectingCellToEdgeOfRows(
    _i2.PlutoMoveDirection? direction, {
    bool? force = false,
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #moveSelectingCellToEdgeOfRows,
          [direction],
          {
            #force: force,
            #notify: notify,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void moveSelectingCellByRowIdx(
    int? rowIdx,
    _i2.PlutoMoveDirection? direction, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #moveSelectingCellByRowIdx,
          [
            rowIdx,
            direction,
          ],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setLayout(_i3.BoxConstraints? size) => super.noSuchMethod(
        Invocation.method(
          #setLayout,
          [size],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setShowColumnTitle(
    bool? flag, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setShowColumnTitle,
          [flag],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setShowColumnFooter(
    bool? flag, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setShowColumnFooter,
          [flag],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setShowColumnFilter(
    bool? flag, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setShowColumnFilter,
          [flag],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setShowLoading(
    bool? flag, {
    _i2.PlutoGridLoadingLevel? level = _i2.PlutoGridLoadingLevel.grid,
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setShowLoading,
          [flag],
          {
            #level: level,
            #notify: notify,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resetShowFrozenColumn() => super.noSuchMethod(
        Invocation.method(
          #resetShowFrozenColumn,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool shouldShowFrozenColumns(double? width) => (super.noSuchMethod(
        Invocation.method(
          #shouldShowFrozenColumns,
          [width],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool enoughFrozenColumnsWidth(double? width) => (super.noSuchMethod(
        Invocation.method(
          #enoughFrozenColumnsWidth,
          [width],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void notifyResizingListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyResizingListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyChangedShowFrozenColumn() => super.noSuchMethod(
        Invocation.method(
          #notifyChangedShowFrozenColumn,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setTextDirection(_i5.TextDirection? textDirection) => super.noSuchMethod(
        Invocation.method(
          #setTextDirection,
          [textDirection],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setGridGlobalOffset(_i5.Offset? offset) => super.noSuchMethod(
        Invocation.method(
          #setGridGlobalOffset,
          [offset],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setPageSize(
    int? pageSize, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setPageSize,
          [pageSize],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setPage(
    int? page, {
    bool? resetCurrentState = true,
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setPage,
          [page],
          {
            #resetCurrentState: resetCurrentState,
            #notify: notify,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resetPage({
    bool? resetCurrentState = true,
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #resetPage,
          [],
          {
            #resetCurrentState: resetCurrentState,
            #notify: notify,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isMainRow(_i2.PlutoRow? row) => (super.noSuchMethod(
        Invocation.method(
          #isMainRow,
          [row],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isNotMainGroupedRow(_i2.PlutoRow? row) => (super.noSuchMethod(
        Invocation.method(
          #isNotMainGroupedRow,
          [row],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isExpandedGroupedRow(_i2.PlutoRow? row) => (super.noSuchMethod(
        Invocation.method(
          #isExpandedGroupedRow,
          [row],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void setRowGroup(
    _i2.PlutoRowGroupDelegate? delegate, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setRowGroup,
          [delegate],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void toggleExpandedRowGroup({
    required _i2.PlutoRow? rowGroup,
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #toggleExpandedRowGroup,
          [],
          {
            #rowGroup: rowGroup,
            #notify: notify,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setRowGroupFilter(_i2.FilteredListFilter<_i2.PlutoRow>? filter) =>
      super.noSuchMethod(
        Invocation.method(
          #setRowGroupFilter,
          [filter],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void sortRowGroup({
    required _i2.PlutoColumn? column,
    required int Function(
      _i2.PlutoRow,
      _i2.PlutoRow,
    )?
        compare,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #sortRowGroup,
          [],
          {
            #column: column,
            #compare: compare,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void insertRowGroup(
    int? index,
    List<_i2.PlutoRow>? rows,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #insertRowGroup,
          [
            index,
            rows,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeRowAndGroupByKey(Iterable<_i3.Key>? keys) => super.noSuchMethod(
        Invocation.method(
          #removeRowAndGroupByKey,
          [keys],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeColumnsInRowGroupByColumn(
    List<_i2.PlutoColumn>? columns, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #removeColumnsInRowGroupByColumn,
          [columns],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void updateRowGroupByHideColumn(List<_i2.PlutoColumn>? columns) =>
      super.noSuchMethod(
        Invocation.method(
          #updateRowGroupByHideColumn,
          [columns],
        ),
        returnValueForMissingStub: null,
      );
  @override
  int? getRowIdxByOffset(double? offset) => (super.noSuchMethod(
        Invocation.method(
          #getRowIdxByOffset,
          [offset],
        ),
        returnValueForMissingStub: null,
      ) as int?);
  @override
  _i2.PlutoRow getNewRow() => (super.noSuchMethod(
        Invocation.method(
          #getNewRow,
          [],
        ),
        returnValue: _FakePlutoRow_18(
          this,
          Invocation.method(
            #getNewRow,
            [],
          ),
        ),
        returnValueForMissingStub: _FakePlutoRow_18(
          this,
          Invocation.method(
            #getNewRow,
            [],
          ),
        ),
      ) as _i2.PlutoRow);
  @override
  List<_i2.PlutoRow> getNewRows({int? count = 1}) => (super.noSuchMethod(
        Invocation.method(
          #getNewRows,
          [],
          {#count: count},
        ),
        returnValue: <_i2.PlutoRow>[],
        returnValueForMissingStub: <_i2.PlutoRow>[],
      ) as List<_i2.PlutoRow>);
  @override
  void setRowChecked(
    _i2.PlutoRow? row,
    bool? flag, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setRowChecked,
          [
            row,
            flag,
          ],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void insertRows(
    int? rowIdx,
    List<_i2.PlutoRow>? rows, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #insertRows,
          [
            rowIdx,
            rows,
          ],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void prependNewRows({int? count = 1}) => super.noSuchMethod(
        Invocation.method(
          #prependNewRows,
          [],
          {#count: count},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void prependRows(List<_i2.PlutoRow>? rows) => super.noSuchMethod(
        Invocation.method(
          #prependRows,
          [rows],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void appendNewRows({int? count = 1}) => super.noSuchMethod(
        Invocation.method(
          #appendNewRows,
          [],
          {#count: count},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void appendRows(List<_i2.PlutoRow>? rows) => super.noSuchMethod(
        Invocation.method(
          #appendRows,
          [rows],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeCurrentRow() => super.noSuchMethod(
        Invocation.method(
          #removeCurrentRow,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeRows(
    List<_i2.PlutoRow>? rows, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #removeRows,
          [rows],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeAllRows({bool? notify = true}) => super.noSuchMethod(
        Invocation.method(
          #removeAllRows,
          [],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void moveRowsByOffset(
    List<_i2.PlutoRow>? rows,
    double? offset, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #moveRowsByOffset,
          [
            rows,
            offset,
          ],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void moveRowsByIndex(
    List<_i2.PlutoRow>? rows,
    int? indexToMove, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #moveRowsByIndex,
          [
            rows,
            indexToMove,
          ],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void toggleAllRowChecked(
    bool? flag, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #toggleAllRowChecked,
          [flag],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Offset toDirectionalOffset(_i5.Offset? offset) => (super.noSuchMethod(
        Invocation.method(
          #toDirectionalOffset,
          [offset],
        ),
        returnValue: _FakeOffset_13(
          this,
          Invocation.method(
            #toDirectionalOffset,
            [offset],
          ),
        ),
        returnValueForMissingStub: _FakeOffset_13(
          this,
          Invocation.method(
            #toDirectionalOffset,
            [offset],
          ),
        ),
      ) as _i5.Offset);
  @override
  void scrollByDirection(
    _i2.PlutoMoveDirection? direction,
    double? offset,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #scrollByDirection,
          [
            direction,
            offset,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool canHorizontalCellScrollByDirection(
    _i2.PlutoMoveDirection? direction,
    _i2.PlutoColumn? columnToMove,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #canHorizontalCellScrollByDirection,
          [
            direction,
            columnToMove,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void moveScrollByRow(
    _i2.PlutoMoveDirection? direction,
    int? rowIdx,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #moveScrollByRow,
          [
            direction,
            rowIdx,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void moveScrollByColumn(
    _i2.PlutoMoveDirection? direction,
    int? columnIdx,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #moveScrollByColumn,
          [
            direction,
            columnIdx,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool needMovingScroll(
    _i5.Offset? offset,
    _i2.PlutoMoveDirection? move,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #needMovingScroll,
          [
            offset,
            move,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void updateCorrectScrollOffset() => super.noSuchMethod(
        Invocation.method(
          #updateCorrectScrollOffset,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void updateScrollViewport() => super.noSuchMethod(
        Invocation.method(
          #updateScrollViewport,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resetScrollToZero() => super.noSuchMethod(
        Invocation.method(
          #resetScrollToZero,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setSelecting(
    bool? flag, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setSelecting,
          [flag],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setSelectingMode(
    _i2.PlutoGridSelectingMode? selectingMode, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setSelectingMode,
          [selectingMode],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setAllCurrentSelecting() => super.noSuchMethod(
        Invocation.method(
          #setAllCurrentSelecting,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setCurrentSelectingPosition({
    _i2.PlutoGridCellPosition? cellPosition,
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setCurrentSelectingPosition,
          [],
          {
            #cellPosition: cellPosition,
            #notify: notify,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setCurrentSelectingPositionByCellKey(
    _i3.Key? cellKey, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setCurrentSelectingPositionByCellKey,
          [cellKey],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setCurrentSelectingPositionWithOffset(_i5.Offset? offset) =>
      super.noSuchMethod(
        Invocation.method(
          #setCurrentSelectingPositionWithOffset,
          [offset],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setCurrentSelectingRowsByRange(
    int? from,
    int? to, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setCurrentSelectingRowsByRange,
          [
            from,
            to,
          ],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void clearCurrentSelecting({bool? notify = true}) => super.noSuchMethod(
        Invocation.method(
          #clearCurrentSelecting,
          [],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void toggleSelectingRow(
    int? rowIdx, {
    bool? notify = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #toggleSelectingRow,
          [rowIdx],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isSelectingInteraction() => (super.noSuchMethod(
        Invocation.method(
          #isSelectingInteraction,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isSelectedRow(_i3.Key? rowKey) => (super.noSuchMethod(
        Invocation.method(
          #isSelectedRow,
          [rowKey],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool isSelectedCell(
    _i2.PlutoCell? cell,
    _i2.PlutoColumn? column,
    int? rowIdx,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isSelectedCell,
          [
            cell,
            column,
            rowIdx,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void handleAfterSelectingRow(
    _i2.PlutoCell? cell,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #handleAfterSelectingRow,
          [
            cell,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void updateVisibilityLayout({bool? notify = false}) => super.noSuchMethod(
        Invocation.method(
          #updateVisibilityLayout,
          [],
          {#notify: notify},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PlutoGridEventManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlutoGridEventManager extends _i1.Mock
    implements _i2.PlutoGridEventManager {
  @override
  _i2.PlutoGridStateManager get stateManager => (super.noSuchMethod(
        Invocation.getter(#stateManager),
        returnValue: _FakePlutoGridStateManager_19(
          this,
          Invocation.getter(#stateManager),
        ),
        returnValueForMissingStub: _FakePlutoGridStateManager_19(
          this,
          Invocation.getter(#stateManager),
        ),
      ) as _i2.PlutoGridStateManager);
  @override
  _i4.PublishSubject<_i2.PlutoGridEvent> get subject => (super.noSuchMethod(
        Invocation.getter(#subject),
        returnValue: _FakePublishSubject_6<_i2.PlutoGridEvent>(
          this,
          Invocation.getter(#subject),
        ),
        returnValueForMissingStub: _FakePublishSubject_6<_i2.PlutoGridEvent>(
          this,
          Invocation.getter(#subject),
        ),
      ) as _i4.PublishSubject<_i2.PlutoGridEvent>);
  @override
  _i6.StreamSubscription<dynamic> get subscription => (super.noSuchMethod(
        Invocation.getter(#subscription),
        returnValue: _FakeStreamSubscription_20<dynamic>(
          this,
          Invocation.getter(#subscription),
        ),
        returnValueForMissingStub: _FakeStreamSubscription_20<dynamic>(
          this,
          Invocation.getter(#subscription),
        ),
      ) as _i6.StreamSubscription<dynamic>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addEvent(_i2.PlutoGridEvent? event) => super.noSuchMethod(
        Invocation.method(
          #addEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.StreamSubscription<_i2.PlutoGridEvent> listener(
          void Function(_i2.PlutoGridEvent)? onData) =>
      (super.noSuchMethod(
        Invocation.method(
          #listener,
          [onData],
        ),
        returnValue: _FakeStreamSubscription_20<_i2.PlutoGridEvent>(
          this,
          Invocation.method(
            #listener,
            [onData],
          ),
        ),
        returnValueForMissingStub:
            _FakeStreamSubscription_20<_i2.PlutoGridEvent>(
          this,
          Invocation.method(
            #listener,
            [onData],
          ),
        ),
      ) as _i6.StreamSubscription<_i2.PlutoGridEvent>);
}

/// A class which mocks [PlutoGridScrollController].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlutoGridScrollController extends _i1.Mock
    implements _i2.PlutoGridScrollController {
  @override
  set vertical(_i2.LinkedScrollControllerGroup? _vertical) =>
      super.noSuchMethod(
        Invocation.setter(
          #vertical,
          _vertical,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set horizontal(_i2.LinkedScrollControllerGroup? _horizontal) =>
      super.noSuchMethod(
        Invocation.setter(
          #horizontal,
          _horizontal,
        ),
        returnValueForMissingStub: null,
      );
  @override
  double get maxScrollHorizontal => (super.noSuchMethod(
        Invocation.getter(#maxScrollHorizontal),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get maxScrollVertical => (super.noSuchMethod(
        Invocation.getter(#maxScrollVertical),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get verticalOffset => (super.noSuchMethod(
        Invocation.getter(#verticalOffset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get horizontalOffset => (super.noSuchMethod(
        Invocation.getter(#horizontalOffset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  void setBodyRowsHorizontal(_i3.ScrollController? scrollController) =>
      super.noSuchMethod(
        Invocation.method(
          #setBodyRowsHorizontal,
          [scrollController],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setBodyRowsVertical(_i3.ScrollController? scrollController) =>
      super.noSuchMethod(
        Invocation.method(
          #setBodyRowsVertical,
          [scrollController],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PlutoGridKeyPressed].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlutoGridKeyPressed extends _i1.Mock
    implements _i2.PlutoGridKeyPressed {
  @override
  bool get shift => (super.noSuchMethod(
        Invocation.getter(#shift),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get ctrl => (super.noSuchMethod(
        Invocation.getter(#ctrl),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [LinkedScrollControllerGroup].
///
/// See the documentation for Mockito's code generation for more information.
class MockLinkedScrollControllerGroup extends _i1.Mock
    implements _i2.LinkedScrollControllerGroup {
  @override
  double get offset => (super.noSuchMethod(
        Invocation.getter(#offset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  _i3.ScrollController addAndGet() => (super.noSuchMethod(
        Invocation.method(
          #addAndGet,
          [],
        ),
        returnValue: _FakeScrollController_21(
          this,
          Invocation.method(
            #addAndGet,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeScrollController_21(
          this,
          Invocation.method(
            #addAndGet,
            [],
          ),
        ),
      ) as _i3.ScrollController);
  @override
  void addOffsetChangedListener(_i5.VoidCallback? onChanged) =>
      super.noSuchMethod(
        Invocation.method(
          #addOffsetChangedListener,
          [onChanged],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeOffsetChangedListener(_i5.VoidCallback? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #removeOffsetChangedListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> animateTo(
    double? offset, {
    required _i3.Curve? curve,
    required Duration? duration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #animateTo,
          [offset],
          {
            #curve: curve,
            #duration: duration,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void jumpTo(double? value) => super.noSuchMethod(
        Invocation.method(
          #jumpTo,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resetScroll() => super.noSuchMethod(
        Invocation.method(
          #resetScroll,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void applyViewportDimension(double? value) => super.noSuchMethod(
        Invocation.method(
          #applyViewportDimension,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ScrollController].
///
/// See the documentation for Mockito's code generation for more information.
class MockScrollController extends _i1.Mock implements _i3.ScrollController {
  @override
  bool get keepScrollOffset => (super.noSuchMethod(
        Invocation.getter(#keepScrollOffset),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  double get initialScrollOffset => (super.noSuchMethod(
        Invocation.getter(#initialScrollOffset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  Iterable<_i3.ScrollPosition> get positions => (super.noSuchMethod(
        Invocation.getter(#positions),
        returnValue: <_i3.ScrollPosition>[],
        returnValueForMissingStub: <_i3.ScrollPosition>[],
      ) as Iterable<_i3.ScrollPosition>);
  @override
  bool get hasClients => (super.noSuchMethod(
        Invocation.getter(#hasClients),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i3.ScrollPosition get position => (super.noSuchMethod(
        Invocation.getter(#position),
        returnValue: _FakeScrollPosition_22(
          this,
          Invocation.getter(#position),
        ),
        returnValueForMissingStub: _FakeScrollPosition_22(
          this,
          Invocation.getter(#position),
        ),
      ) as _i3.ScrollPosition);
  @override
  double get offset => (super.noSuchMethod(
        Invocation.getter(#offset),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i6.Future<void> animateTo(
    double? offset, {
    required Duration? duration,
    required _i3.Curve? curve,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #animateTo,
          [offset],
          {
            #duration: duration,
            #curve: curve,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void jumpTo(double? value) => super.noSuchMethod(
        Invocation.method(
          #jumpTo,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void attach(_i3.ScrollPosition? position) => super.noSuchMethod(
        Invocation.method(
          #attach,
          [position],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void detach(_i3.ScrollPosition? position) => super.noSuchMethod(
        Invocation.method(
          #detach,
          [position],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.ScrollPosition createScrollPosition(
    _i3.ScrollPhysics? physics,
    _i3.ScrollContext? context,
    _i3.ScrollPosition? oldPosition,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createScrollPosition,
          [
            physics,
            context,
            oldPosition,
          ],
        ),
        returnValue: _FakeScrollPosition_22(
          this,
          Invocation.method(
            #createScrollPosition,
            [
              physics,
              context,
              oldPosition,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeScrollPosition_22(
          this,
          Invocation.method(
            #createScrollPosition,
            [
              physics,
              context,
              oldPosition,
            ],
          ),
        ),
      ) as _i3.ScrollPosition);
  @override
  void debugFillDescription(List<String>? description) => super.noSuchMethod(
        Invocation.method(
          #debugFillDescription,
          [description],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ScrollPosition].
///
/// See the documentation for Mockito's code generation for more information.
class MockScrollPosition extends _i1.Mock implements _i3.ScrollPosition {
  @override
  _i3.ScrollPhysics get physics => (super.noSuchMethod(
        Invocation.getter(#physics),
        returnValue: _FakeScrollPhysics_23(
          this,
          Invocation.getter(#physics),
        ),
        returnValueForMissingStub: _FakeScrollPhysics_23(
          this,
          Invocation.getter(#physics),
        ),
      ) as _i3.ScrollPhysics);
  @override
  _i3.ScrollContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeScrollContext_24(
          this,
          Invocation.getter(#context),
        ),
        returnValueForMissingStub: _FakeScrollContext_24(
          this,
          Invocation.getter(#context),
        ),
      ) as _i3.ScrollContext);
  @override
  bool get keepScrollOffset => (super.noSuchMethod(
        Invocation.getter(#keepScrollOffset),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i3.ValueNotifier<bool> get isScrollingNotifier => (super.noSuchMethod(
        Invocation.getter(#isScrollingNotifier),
        returnValue: _FakeValueNotifier_25<bool>(
          this,
          Invocation.getter(#isScrollingNotifier),
        ),
        returnValueForMissingStub: _FakeValueNotifier_25<bool>(
          this,
          Invocation.getter(#isScrollingNotifier),
        ),
      ) as _i3.ValueNotifier<bool>);
  @override
  double get minScrollExtent => (super.noSuchMethod(
        Invocation.getter(#minScrollExtent),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get maxScrollExtent => (super.noSuchMethod(
        Invocation.getter(#maxScrollExtent),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  bool get hasContentDimensions => (super.noSuchMethod(
        Invocation.getter(#hasContentDimensions),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  double get pixels => (super.noSuchMethod(
        Invocation.getter(#pixels),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  bool get hasPixels => (super.noSuchMethod(
        Invocation.getter(#hasPixels),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  double get viewportDimension => (super.noSuchMethod(
        Invocation.getter(#viewportDimension),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  bool get hasViewportDimension => (super.noSuchMethod(
        Invocation.getter(#hasViewportDimension),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get haveDimensions => (super.noSuchMethod(
        Invocation.getter(#haveDimensions),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get allowImplicitScrolling => (super.noSuchMethod(
        Invocation.getter(#allowImplicitScrolling),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i9.ScrollDirection get userScrollDirection => (super.noSuchMethod(
        Invocation.getter(#userScrollDirection),
        returnValue: _i9.ScrollDirection.idle,
        returnValueForMissingStub: _i9.ScrollDirection.idle,
      ) as _i9.ScrollDirection);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i3.AxisDirection get axisDirection => (super.noSuchMethod(
        Invocation.getter(#axisDirection),
        returnValue: _i3.AxisDirection.up,
        returnValueForMissingStub: _i3.AxisDirection.up,
      ) as _i3.AxisDirection);
  @override
  _i3.Axis get axis => (super.noSuchMethod(
        Invocation.getter(#axis),
        returnValue: _i3.Axis.horizontal,
        returnValueForMissingStub: _i3.Axis.horizontal,
      ) as _i3.Axis);
  @override
  bool get outOfRange => (super.noSuchMethod(
        Invocation.getter(#outOfRange),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get atEdge => (super.noSuchMethod(
        Invocation.getter(#atEdge),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  double get extentBefore => (super.noSuchMethod(
        Invocation.getter(#extentBefore),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get extentInside => (super.noSuchMethod(
        Invocation.getter(#extentInside),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double get extentAfter => (super.noSuchMethod(
        Invocation.getter(#extentAfter),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  void absorb(_i3.ScrollPosition? other) => super.noSuchMethod(
        Invocation.method(
          #absorb,
          [other],
        ),
        returnValueForMissingStub: null,
      );
  @override
  double setPixels(double? newPixels) => (super.noSuchMethod(
        Invocation.method(
          #setPixels,
          [newPixels],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  void correctPixels(double? value) => super.noSuchMethod(
        Invocation.method(
          #correctPixels,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void correctBy(double? correction) => super.noSuchMethod(
        Invocation.method(
          #correctBy,
          [correction],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void forcePixels(double? value) => super.noSuchMethod(
        Invocation.method(
          #forcePixels,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void saveScrollOffset() => super.noSuchMethod(
        Invocation.method(
          #saveScrollOffset,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void restoreScrollOffset() => super.noSuchMethod(
        Invocation.method(
          #restoreScrollOffset,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void restoreOffset(
    double? offset, {
    bool? initialRestore = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #restoreOffset,
          [offset],
          {#initialRestore: initialRestore},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void saveOffset() => super.noSuchMethod(
        Invocation.method(
          #saveOffset,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  double applyBoundaryConditions(double? value) => (super.noSuchMethod(
        Invocation.method(
          #applyBoundaryConditions,
          [value],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  bool applyViewportDimension(double? viewportDimension) => (super.noSuchMethod(
        Invocation.method(
          #applyViewportDimension,
          [viewportDimension],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool applyContentDimensions(
    double? minScrollExtent,
    double? maxScrollExtent,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #applyContentDimensions,
          [
            minScrollExtent,
            maxScrollExtent,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool correctForNewDimensions(
    _i3.ScrollMetrics? oldPosition,
    _i3.ScrollMetrics? newPosition,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #correctForNewDimensions,
          [
            oldPosition,
            newPosition,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void applyNewDimensions() => super.noSuchMethod(
        Invocation.method(
          #applyNewDimensions,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> ensureVisible(
    _i3.RenderObject? object, {
    double? alignment = 0.0,
    Duration? duration = Duration.zero,
    _i3.Curve? curve = _i3.Curves.ease,
    _i3.ScrollPositionAlignmentPolicy? alignmentPolicy =
        _i3.ScrollPositionAlignmentPolicy.explicit,
    _i3.RenderObject? targetRenderObject,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #ensureVisible,
          [object],
          {
            #alignment: alignment,
            #duration: duration,
            #curve: curve,
            #alignmentPolicy: alignmentPolicy,
            #targetRenderObject: targetRenderObject,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> animateTo(
    double? to, {
    required Duration? duration,
    required _i3.Curve? curve,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #animateTo,
          [to],
          {
            #duration: duration,
            #curve: curve,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void jumpTo(double? value) => super.noSuchMethod(
        Invocation.method(
          #jumpTo,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void pointerScroll(double? delta) => super.noSuchMethod(
        Invocation.method(
          #pointerScroll,
          [delta],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> moveTo(
    double? to, {
    Duration? duration,
    _i3.Curve? curve,
    bool? clamp = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #moveTo,
          [to],
          {
            #duration: duration,
            #curve: curve,
            #clamp: clamp,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void jumpToWithoutSettling(double? value) => super.noSuchMethod(
        Invocation.method(
          #jumpToWithoutSettling,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.ScrollHoldController hold(_i5.VoidCallback? holdCancelCallback) =>
      (super.noSuchMethod(
        Invocation.method(
          #hold,
          [holdCancelCallback],
        ),
        returnValue: _FakeScrollHoldController_26(
          this,
          Invocation.method(
            #hold,
            [holdCancelCallback],
          ),
        ),
        returnValueForMissingStub: _FakeScrollHoldController_26(
          this,
          Invocation.method(
            #hold,
            [holdCancelCallback],
          ),
        ),
      ) as _i3.ScrollHoldController);
  @override
  _i7.Drag drag(
    _i3.DragStartDetails? details,
    _i5.VoidCallback? dragCancelCallback,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #drag,
          [
            details,
            dragCancelCallback,
          ],
        ),
        returnValue: _FakeDrag_27(
          this,
          Invocation.method(
            #drag,
            [
              details,
              dragCancelCallback,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeDrag_27(
          this,
          Invocation.method(
            #drag,
            [
              details,
              dragCancelCallback,
            ],
          ),
        ),
      ) as _i7.Drag);
  @override
  void beginActivity(_i3.ScrollActivity? newActivity) => super.noSuchMethod(
        Invocation.method(
          #beginActivity,
          [newActivity],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStartScroll() => super.noSuchMethod(
        Invocation.method(
          #didStartScroll,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didUpdateScrollPositionBy(double? delta) => super.noSuchMethod(
        Invocation.method(
          #didUpdateScrollPositionBy,
          [delta],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didEndScroll() => super.noSuchMethod(
        Invocation.method(
          #didEndScroll,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didOverscrollBy(double? value) => super.noSuchMethod(
        Invocation.method(
          #didOverscrollBy,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didUpdateScrollDirection(_i9.ScrollDirection? direction) =>
      super.noSuchMethod(
        Invocation.method(
          #didUpdateScrollDirection,
          [direction],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didUpdateScrollMetrics() => super.noSuchMethod(
        Invocation.method(
          #didUpdateScrollMetrics,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool recommendDeferredLoading(_i3.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #recommendDeferredLoading,
          [context],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void debugFillDescription(List<String>? description) => super.noSuchMethod(
        Invocation.method(
          #debugFillDescription,
          [description],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.ScrollMetrics copyWith({
    double? minScrollExtent,
    double? maxScrollExtent,
    double? pixels,
    double? viewportDimension,
    _i3.AxisDirection? axisDirection,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #minScrollExtent: minScrollExtent,
            #maxScrollExtent: maxScrollExtent,
            #pixels: pixels,
            #viewportDimension: viewportDimension,
            #axisDirection: axisDirection,
          },
        ),
        returnValue: _FakeScrollMetrics_28(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #minScrollExtent: minScrollExtent,
              #maxScrollExtent: maxScrollExtent,
              #pixels: pixels,
              #viewportDimension: viewportDimension,
              #axisDirection: axisDirection,
            },
          ),
        ),
        returnValueForMissingStub: _FakeScrollMetrics_28(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #minScrollExtent: minScrollExtent,
              #maxScrollExtent: maxScrollExtent,
              #pixels: pixels,
              #viewportDimension: viewportDimension,
              #axisDirection: axisDirection,
            },
          ),
        ),
      ) as _i3.ScrollMetrics);
}

/// A class which mocks [StreamSubscription].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamSubscription<T> extends _i1.Mock
    implements _i6.StreamSubscription<T> {
  @override
  bool get isPaused => (super.noSuchMethod(
        Invocation.getter(#isPaused),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i6.Future<void> cancel() => (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void onData(void Function(T)? handleData) => super.noSuchMethod(
        Invocation.method(
          #onData,
          [handleData],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(Function? handleError) => super.noSuchMethod(
        Invocation.method(
          #onError,
          [handleError],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onDone(void Function()? handleDone) => super.noSuchMethod(
        Invocation.method(
          #onDone,
          [handleDone],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void pause([_i6.Future<void>? resumeSignal]) => super.noSuchMethod(
        Invocation.method(
          #pause,
          [resumeSignal],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resume() => super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<E> asFuture<E>([E? futureValue]) => (super.noSuchMethod(
        Invocation.method(
          #asFuture,
          [futureValue],
        ),
        returnValue: _i6.Future<E>.value(null),
        returnValueForMissingStub: _i6.Future<E>.value(null),
      ) as _i6.Future<E>);
}

/// A class which mocks [FocusNode].
///
/// See the documentation for Mockito's code generation for more information.
class MockFocusNode extends _i1.Mock implements _i3.FocusNode {
  @override
  set onKey(_i3.FocusOnKeyCallback? _onKey) => super.noSuchMethod(
        Invocation.setter(
          #onKey,
          _onKey,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set onKeyEvent(_i3.FocusOnKeyEventCallback? _onKeyEvent) =>
      super.noSuchMethod(
        Invocation.setter(
          #onKeyEvent,
          _onKeyEvent,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get skipTraversal => (super.noSuchMethod(
        Invocation.getter(#skipTraversal),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set skipTraversal(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #skipTraversal,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get canRequestFocus => (super.noSuchMethod(
        Invocation.getter(#canRequestFocus),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set canRequestFocus(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #canRequestFocus,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get descendantsAreFocusable => (super.noSuchMethod(
        Invocation.getter(#descendantsAreFocusable),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set descendantsAreFocusable(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #descendantsAreFocusable,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get descendantsAreTraversable => (super.noSuchMethod(
        Invocation.getter(#descendantsAreTraversable),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set descendantsAreTraversable(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #descendantsAreTraversable,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Iterable<_i3.FocusNode> get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: <_i3.FocusNode>[],
        returnValueForMissingStub: <_i3.FocusNode>[],
      ) as Iterable<_i3.FocusNode>);
  @override
  Iterable<_i3.FocusNode> get traversalChildren => (super.noSuchMethod(
        Invocation.getter(#traversalChildren),
        returnValue: <_i3.FocusNode>[],
        returnValueForMissingStub: <_i3.FocusNode>[],
      ) as Iterable<_i3.FocusNode>);
  @override
  set debugLabel(String? value) => super.noSuchMethod(
        Invocation.setter(
          #debugLabel,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Iterable<_i3.FocusNode> get descendants => (super.noSuchMethod(
        Invocation.getter(#descendants),
        returnValue: <_i3.FocusNode>[],
        returnValueForMissingStub: <_i3.FocusNode>[],
      ) as Iterable<_i3.FocusNode>);
  @override
  Iterable<_i3.FocusNode> get traversalDescendants => (super.noSuchMethod(
        Invocation.getter(#traversalDescendants),
        returnValue: <_i3.FocusNode>[],
        returnValueForMissingStub: <_i3.FocusNode>[],
      ) as Iterable<_i3.FocusNode>);
  @override
  Iterable<_i3.FocusNode> get ancestors => (super.noSuchMethod(
        Invocation.getter(#ancestors),
        returnValue: <_i3.FocusNode>[],
        returnValueForMissingStub: <_i3.FocusNode>[],
      ) as Iterable<_i3.FocusNode>);
  @override
  bool get hasFocus => (super.noSuchMethod(
        Invocation.getter(#hasFocus),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get hasPrimaryFocus => (super.noSuchMethod(
        Invocation.getter(#hasPrimaryFocus),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i3.FocusHighlightMode get highlightMode => (super.noSuchMethod(
        Invocation.getter(#highlightMode),
        returnValue: _i3.FocusHighlightMode.touch,
        returnValueForMissingStub: _i3.FocusHighlightMode.touch,
      ) as _i3.FocusHighlightMode);
  @override
  _i5.Size get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: _FakeSize_29(
          this,
          Invocation.getter(#size),
        ),
        returnValueForMissingStub: _FakeSize_29(
          this,
          Invocation.getter(#size),
        ),
      ) as _i5.Size);
  @override
  _i5.Offset get offset => (super.noSuchMethod(
        Invocation.getter(#offset),
        returnValue: _FakeOffset_13(
          this,
          Invocation.getter(#offset),
        ),
        returnValueForMissingStub: _FakeOffset_13(
          this,
          Invocation.getter(#offset),
        ),
      ) as _i5.Offset);
  @override
  _i5.Rect get rect => (super.noSuchMethod(
        Invocation.getter(#rect),
        returnValue: _FakeRect_30(
          this,
          Invocation.getter(#rect),
        ),
        returnValueForMissingStub: _FakeRect_30(
          this,
          Invocation.getter(#rect),
        ),
      ) as _i5.Rect);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void unfocus(
          {_i3.UnfocusDisposition? disposition =
              _i3.UnfocusDisposition.scope}) =>
      super.noSuchMethod(
        Invocation.method(
          #unfocus,
          [],
          {#disposition: disposition},
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool consumeKeyboardToken() => (super.noSuchMethod(
        Invocation.method(
          #consumeKeyboardToken,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i3.FocusAttachment attach(
    _i3.BuildContext? context, {
    _i3.FocusOnKeyEventCallback? onKeyEvent,
    _i3.FocusOnKeyCallback? onKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #attach,
          [context],
          {
            #onKeyEvent: onKeyEvent,
            #onKey: onKey,
          },
        ),
        returnValue: _FakeFocusAttachment_31(
          this,
          Invocation.method(
            #attach,
            [context],
            {
              #onKeyEvent: onKeyEvent,
              #onKey: onKey,
            },
          ),
        ),
        returnValueForMissingStub: _FakeFocusAttachment_31(
          this,
          Invocation.method(
            #attach,
            [context],
            {
              #onKeyEvent: onKeyEvent,
              #onKey: onKey,
            },
          ),
        ),
      ) as _i3.FocusAttachment);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void requestFocus([_i3.FocusNode? node]) => super.noSuchMethod(
        Invocation.method(
          #requestFocus,
          [node],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool nextFocus() => (super.noSuchMethod(
        Invocation.method(
          #nextFocus,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool previousFocus() => (super.noSuchMethod(
        Invocation.method(
          #previousFocus,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool focusInDirection(_i3.TraversalDirection? direction) =>
      (super.noSuchMethod(
        Invocation.method(
          #focusInDirection,
          [direction],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void debugFillProperties(_i10.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i3.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i3.DiagnosticsNode>[],
        returnValueForMissingStub: <_i3.DiagnosticsNode>[],
      ) as List<_i3.DiagnosticsNode>);
  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
  @override
  String toStringShallow({
    String? joiner = r', ',
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String toStringDeep({
    String? prefixLineOne = r'',
    String? prefixOtherLines,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
          },
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i3.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i11.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_32(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_32(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i3.DiagnosticsNode);
  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
